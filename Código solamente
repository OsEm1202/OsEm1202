from time import time
import random

preguntas = []         #La lista preguntas guardara en forma de matriz las preguntas en el orden que se vayan escribiendo
preguntas_quiz = []    #La lista preguntas_quiz guardara en forma de matriz las preguntas en el orden que se vayan escribiendo, esta lista es exclusiva para la funcion presentar_quiz                 
calificaciones_usuarios = [] #Esta lista guardara el total de usuarios la cual será el numero de calificaciones que se obtengan, de la misma manera, con esta lista podemos obtener el promedio de las caificaciones como el total de respuestas correctas e incorrectas
nombre_archivo = "preguntas" #Nombre default del archivo del que se van a leer las preguntas


def registrar_pregunta(numero, no_es_Quiz = True):       #La funcion resgistrar_pregunta definira y guardara las preguntas en la lista preguntas de la siguente manera: 1. Numero de pregunta 2. Pregunta 3. Posibles respuestas 4. Respuesta correcta
  global preguntas                                       #Para el caso de la lista preguntas_quiz solamente mostrara 1. Pregunta 2. Pregunta correcta en el caso de haber llamada la funcion presentar_quiz
  global preguntas_quiz
  global nombre_archivo

  pregunta = []
  pregunta.append(str(numero))

  if no_es_Quiz:
    enfoque = input("¿Cual será el enfoque de tu pregunta? (lectura, matemáticas, ciencias): ")
  else:
    enfoque = "Quiz"
  
  pregunta.append(enfoque)
  
  
  texto_pregunta = input("Introduce tu pregunta: ")
  pregunta.append(texto_pregunta)
  res_n = int(input("¿Cuantas posibles respuestas tendrá tu pregunta?: "))
  for respuesta in range(res_n):
    respuesta = input("Introduce tu respuesta: ")
    pregunta.append(respuesta)
  correcta = input("Ingresa la respuesta correcta: ")
  pregunta.append(correcta)
  
  
  print("Su enfoque es: ", enfoque) 
  print("La pregunta es: ", texto_pregunta)
  print("La respuesta correcta es: ", correcta)
  
  if no_es_Quiz:
    if numero == len(preguntas) + 1:
      preguntas.append(pregunta)
    else:
      preguntas[numero - 1] = pregunta
    print(preguntas)
    guardar_archivo(nombre_archivo)
  else:
    preguntas_quiz.append(pregunta)
    print(preguntas_quiz)
  
  

    
  #preguntas.append(pregunta):

def imprimir_pregunta(number, pregunta):  #Esta funcion yo la cree para nombrar las respuestas como opcion multiple al igual que para a selección de la misma tanto para la funcion estudiar_area y presentar_quiz
  letras = ["a","b","c","d","e","f","g","h",'i',"j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
  print(str(number) + ". " + pregunta[2])
  for i in range(len(pregunta) - 4):
    print("\t"+letras[i]+") "+ pregunta[i + 3])
  letra_respuesta_correcta = letras[pregunta.index(pregunta[-1]) - 3]

  resp = input("Respuesta (escribir la letra correspondiente): ")

  if letra_respuesta_correcta == resp:
    print("Respuesta correcta")
    return 1
  else:
    print("Respuesta incorrecta, respuesta correcta: {r}".format(r = letra_respuesta_correcta))
    return 0

def cargar_archivo(nombre_archivo):
  global preguntas
  nombre = nombre_archivo + ".txt"
  with open(nombre,"r") as archivo:
    for linea in archivo:
      preguntas.append(linea.split(", "))
  for pregunta in preguntas:
    pregunta[-1] = pregunta[-1][0:-1]
  print(preguntas)

def guardar_archivo(nombre_archivo):
  global preguntas
  nombre = nombre_archivo + ".txt"
  with open(nombre,"w") as archivo:
    for pregunta in preguntas:
      texto_pregunta = ""
      for i,p in enumerate(pregunta):
        texto_pregunta += p
        if i != len(pregunta) - 1:
          texto_pregunta += ", "
        else:
          texto_pregunta +"\n"
      archivo.write(texto_pregunta)

def main():  #Funcion principal que llamará a las demás funciones
  global nombre_archivo
  archivo_cargado = False
  while not archivo_cargado:
    nombre_archivo = input("¿Cómo se va a llamar el archivo? ")
    try:
      cargar_archivo(nombre_archivo)
      archivo_cargado = True
    except FileNotFoundError:
      print("No se encontro un archivo con ese nombre")
  
  def menu():
    while True:
      print("1. Alta de preguntas de prueba PISA (lectura, matemáticas, ciencias)")
      print("2. Actualizar preguntas de la prueba PISA (lectura, matemáticas, ciencias)")
      print("3. Estudiar preguntas de cierta área (lectura, matemáticas, ciencias)")  #Función que mostrará el menú de opciones
      print("4. Presentar un quiz (lectura, matemáticas, ciencias)")
      print("5. Reporte de calificaciones")
      print("6. Salir")


      opcion = int(input("Introduce una opcion del menu: "))
      if opcion < 1 or opcion > 6:
        print("Error")
        continue
      
      if opcion == 1:
        global preguntas
        registrar_pregunta(len(preguntas) + 1)
      
      if opcion == 2:                                     #Condicionales if que llaman a las funciones dependiendo de la opcion que elija el usuario
        actualizar_pregunta()

      if opcion == 3:
        estudiar_area()

      if opcion == 4:
        presentar_quiz()

      if opcion == 5:
        reportar_calificaciones()

      if opcion == 6:
        print("Programa finalizado, vuelva pronto")
        break

  menu()

def actualizar_pregunta():    #Funcion que actualizara alguna pregunta en la lista preguntas en caso de ser necesario
  global preguntas
  print("Lista de preguntas: ")
  for pregunta in preguntas:
    print(pregunta[0] + ": ", end = "")
    for elemento in range(1, len(pregunta) - 1):
      print(pregunta[elemento] + ", ", end = "")
    print("Respuesta correcta: " + pregunta[-1]) 
  actualizar = int(input("¿Cual desea actualizar?: "))
  registrar_pregunta(actualizar)
  

def estudiar_area():    #Funcion que permite estudiar un area en específico a partir de las preguntas definidas en la lista preguntas
  global preguntas
  enfoque = input("¿Cuál será el enfoque de tu pregunta? (Lectura, Matemáticas, Ciencias): ")
  tipo_preguntas = []
  for pregunta in preguntas:
    if pregunta[1] == enfoque:
      tipo_preguntas.append(pregunta)
  cantidad = int(input("Cuantas preguntas deseas que se impriman (Máximo {max}): ".format(max = len(tipo_preguntas))))
  score = 0
  for i in range(cantidad):
    pregunta_presentar = random.choice(tipo_preguntas)
    tipo_preguntas.remove(pregunta_presentar)
    score += imprimir_pregunta(i + 1, pregunta_presentar)
  print("Respuestas correctas: {s}".format(s = score))
  calificaciones_usuarios.append(score)

def presentar_quiz():    #Funcion que permite estudiar un quiz general de 10 preguntas aleatorias previamente definidas en la lista preguntas_quiz
  global preguntas_quiz
  global calificaciones_usuarios

  preguntas_quiz = []
  for presentar in range(10):
    registrar_pregunta(presentar + 1, False)
  
  random.shuffle(preguntas_quiz)
    
  score = 0

  tiempo_inicio = time()

  for i in range(10):
    respuesta = imprimir_pregunta(i + 1, preguntas_quiz[i])
    if time() - tiempo_inicio <= 1200:
      score += respuesta
      time_left = 1200 - round(time() - tiempo_inicio) 
      mins, secs = divmod(time_left, 60)
      timer = '{:02d}:{:02d}'.format(mins, secs)

      print("Tiempo restante: " + timer + " minutos")
    else:
      print("Se acabo el tiempo hace {t} segundos".format(t = tiempo() - inicio_examen))
      break
  calificaciones_usuarios.append(score)

def reportar_calificaciones():     #Funcion que permite imprimir el total de usuarios, promedio al igual que de total de preguntas correctas e incorrectas contando cuantos quizzes fueron resueltos.
  global calificaciones_usuarios
  print('Total de usuarios:', len(calificaciones_usuarios))
  promedio = sum(calificaciones_usuarios) / len(calificaciones_usuarios)
  print('Promedio de calificaciones:', promedio)
  porcentaje_correcto = sum(calificaciones_usuarios) / (len(calificaciones_usuarios) * 10)
  print('Preguntas correctas: ' + str(porcentaje_correcto * 100) + '%')
  print('Preguntas ncorrectas: ' + str((1 - porcentaje_correcto) * 100) + '%')

main()
